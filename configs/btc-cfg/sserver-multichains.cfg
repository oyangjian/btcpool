#
# stratum server cfg
#
# @since 2016-06
# @copyright btc.com
#

# is using testnet3
testnet = false;

zookeeper = {
  brokers = "kafka.cluster:2181"; # "10.0.0.1:2181,10.0.0.2:2181,..."
};

sserver = {
  # serverType
  type = "BTC";
  
  ip = "0.0.0.0";
  port = 3333;

  # should be global unique, range: [1, 255]
  # If the id is 0, try to automatically assign one from zookeeper.
  id = 1;
  # The lock path used when automatically assigning an id
  zookeeper_lock_path = "/locks/sserver_btc";

  # how many seconds between two share submit
  share_avg_seconds = 10;

  # the lifetime of a job
  # It should not be too short, otherwise the valid share will be rejected due to job not found.
  max_job_lifetime = 300;

  # the job interval
  # sserver will push latest job if there are no new jobs for this interval
  mining_notify_interval = 40;

  # default difficulty (hex)
  default_difficulty = "4000";

  # max difficulty (hex)
  max_difficulty = "4000000000000000";

  # min difficulty (hex)
  min_difficulty = "40";

  # Adjust difficulty once every N second
  diff_adjust_period = 900;

  # When exiting, the connection will be closed gradually within the specified time.
  # Set to 0 to disable this feature.
  shutdown_grace_period = 3600;

  # Override these in each chain (optionally)
  nicehash = {
    # Set to true if you want to force minimal difficulty for whole sserver
    forced = false;

    # Fallback value when ZooKeeper is not available
    min_difficulty = "10000";

    # Read NiceHash minimal difficulty from this ZooKeeper node
    min_difficulty_zookeeper_path = "/nicehash/sha256/min_difficulty"
  };
  
  #
  # version_mask, uint32_t
  #          2(0x00000002) : allow client change bit 1
  #         16(0x00000010) : allow client change bit 4
  #  536862720(0x1fffe000) : allow client change bit 13 to 28
  #
  #  version_mask = 0;
  #  version_mask = 16;
  #  version_mask = 536862720; // recommended, BIP9 security
  #  ...
  #
  version_mask = 536862720;
  
  # Mining multi chains (such as BTC and BCH) with the same sserver.
  # Sserver will query zookeeper to find the chain that a user want mining.
  multi_chains = true;
  # multiple chain algo, sha256d(btc/bch/bsv), ethash(eth,etc)
  algo = "sha256d"

  ########################## dev options #########################

  # if enable simulator, all share will be accepted. for testing
  enable_simulator = false;

  # if enable it, all share will make block and submit. for testing
  enable_submit_invalid_block = false;

  # if enable, difficulty sent to miners is always dev_fixed_difficulty. for development
  enable_dev_mode = false;

  # difficulty to send to miners. for development
  dev_fixed_difficulty = 0.005;
  
  ###################### end of dev options ######################
};

chains = (
  {
    name = "BSV";

    # write last mining notify job send time to file, for monitor
    file_last_notify_time = "./sserver_lastnotifytime_bsv.txt";
	# not used
    users_list_id_api_url = "http://localhost/btcpool/get_user_id_multichain.php";

    # kafka brokers
    kafka_brokers = "kafka.cluster:9092"; # "10.0.0.1:9092,10.0.0.2:9092,..."
    # kafka topics
    job_topic = "BsvJob";
    share_topic = "BsvShare";
    solved_share_topic = "BsvSolvedShare";
    common_events_topic = "BsvCommonEvents";
    auxpow_solved_share_topic = "AuxSolvedShare";
    rsk_solved_share_topic = "RskSolvedShare";

    # Specify a chain-based user id for single-user mode
    #single_user_puid = 1;
  },
  {
    name = "BTC";

    # write last mining notify job send time to file, for monitor
    file_last_notify_time = "./sserver_lastnotifytime_btc.txt";
	# not used
    users_list_id_api_url = "http://localhost/btcpool/get_user_id_multichain.php";

    # kafka brokers
    kafka_brokers = "kafka.cluster:9092"; # "10.0.0.1:9092,10.0.0.2:9092,..."
    # kafka topics
    job_topic = "BtcJob";
    share_topic = "BtcShare";
    solved_share_topic = "BtcSolvedShare";
    common_events_topic = "BtcCommonEvents";
    auxpow_solved_share_topic = "AuxSolvedShare";
    rsk_solved_share_topic = "RskSolvedShare";

    # Specify a chain-based user id for single-user mode
    #single_user_puid = 1;
  },
  {
    name = "BCH";

    # write last mining notify job send time to file, for monitor
    file_last_notify_time = "./sserver_lastnotifytime_bch.txt";
	# not used
    users_list_id_api_url = "http://localhost/btcpool/get_user_id_multichain.php";
    
    # kafka brokers
    kafka_brokers = "kafka.cluster:9092"; # "10.0.0.1:9092,10.0.0.2:9092,..."
    # kafka topics
    job_topic = "BchJob";
    share_topic = "BchShare";
    solved_share_topic = "BchSolvedShare";
    common_events_topic = "BchCommonEvents";
    auxpow_solved_share_topic = "AuxSolvedShare";
    rsk_solved_share_topic = "RskSolvedShare";

    # Specify a chain-based user id for single-user mode
    #single_user_puid = 2;
  }
);

users = {
  # Make the user name case insensitive
  case_insensitive = true;

  #list_id_api_url = "https://www.bfcpool.com/pool/stratum/get_user";
  list_id_api_url = "http://localhost/btcpool/get_user_id_multichain.php";
  # The parent node of userName-chainName map in Zookeeper
  zookeeper_userchain_map = "/sserver/userchain/bitcoin";

  # remove the suffix appended to the user name
  # example: tiger_eth -> tiger, aaa_bbb_ccc -> aaa_bbb
  strip_user_suffix = true;
  user_suffix_separator = "_";

  # user auto register
  enable_auto_reg = false;
  auto_reg_max_pending_users = 50;
  zookeeper_auto_reg_watch_dir = "/sserver/autoreg";

  # Enable single user mode.
  # In this mode, all sub-accounts connected to the sserver will become the worker name prefix for a specified user.
  # Example, a worker "user2.11x20" will become "user1.user2.11x20".
  #single_user_mode = false;
  #single_user_name = "user1";

  # The interval that checking if a user's chain be switched
  # The timing check is just a backup measure to ensure successful chain switching.
  # Real-time zookeeper event notification is the main measure.
  namechains_check_interval = 300;
};

management = {
  # getInterfaceAddrs() segment fault
  enabled = false; # default: true

  kafka_brokers = "kafka.cluster:9092"; # "10.0.0.1:9092,10.0.0.2:9092,..."
  controller_topic = "BtcManController";
  processor_topic = "BtcManProcessor";

  auto_switch_chain = true;
};
